package main

import (
	"bytes"
	"encoding/csv"
	"encoding/json"
	"flag"
	"fmt"
	"github.com/mohae/struct2csv"
	"net/http"
	"os"
	"runtime"
	"time"
)

// deklarasi struct lead data
type LeadData struct {
	Data []Museum
}

// deklarasi struct untuk menyimpan data dari json
type Museum struct {
	MuseumId          string `json:"museum_id"`
	KodePengelolaan   string `json:"kode_pengelolaan"`
	Nama              string `json:"nama"`
	SDM               string `json:"sdm"`
	Alamat            string `json:"alamat_jalan"`
	Kelurahan         string `json:"desa_kelurahan"`
	Kecamatan         string `json:"kecamatan"`
	Kota              string `json:"kabupaten_kota"`
	Propinsi          string `json:"propinsi"`
	Lintang           string `json:"lintang"`
	Bujur             string `json:"bujur"`
	Koleksi           string `json:"koleksi"`
	SumberDana        string `json:"sumber_dana"`
	Pengelola         string `json:"pengelola"`
	Tipe              string `json:"tipe"`
	Standar           string `json:"standar"`
	TahunBerdiri      string `json:"tahun_berdiri"`
	Bangunan          string `json:"bangunan"`
	LuasTanah         string `json:"luas_tanah"`
	StatusKepemilikan string `json:"status_kepemilikan"`
}

// dwklarasi url dengan timeout 10 detik
var myClient = &http.Client{Timeout: 10 * time.Second}

// fungsi untuk mengambil json dan dimasukkan ke struct
func getJson(url string) []Museum {
	// request get pada url
	r, err := myClient.Get(url)
	if err != nil {
		panic(err)
	}
	defer r.Body.Close()
	// Unmarshal request body
	var data LeadData
	buff := new(bytes.Buffer)
	buff.ReadFrom(r.Body)
	respBytes := buff.Bytes()
	// fungsi untuk menghilangkan prefix unicode utf-8
	respBytes = bytes.TrimPrefix(respBytes, []byte("\xef\xbb\xbf"))
	err = json.Unmarshal(respBytes, &data)
	if err != nil {
		panic(err)
	}
	return data.Data
}

// fungsi untuk mengubah struct menjadi csv dan membuat file pada lokasi yang diinginkan
// fungsi berikut memilki 3 parameter yaitu lokasi menyimpan file, nama file, dan struct museum tiap kota
func writeToCSV(path, name string, data []Museum) {
	enc := struct2csv.New()
	rows, err := enc.Marshal(data)
	if err != nil {
		fmt.Printf("ERROR marshaling file, %s", err)
	}
	fname := path + "\\" + name + ".csv"
	file, err := os.Create(fname)
	if err != nil {
		fmt.Printf("ERROR creating file, %s", err)
	}
	defer file.Close()

	writer := csv.NewWriter(file)
	defer writer.Flush()

	for _, value := range rows {
		err := writer.Write(value)
		if err != nil {
			fmt.Printf("ERROR writing file, %s", err)
		}
	}
}

func main() {
	// program ini menggunakan 2 flag yaitu concurrent_limit dan output path
	var limit = flag.Int64("concurrent_limit", 1, "limit concurrent yang digunakan")
	var output = flag.String("output", "/var/home", "lokasi output file csv")

	flag.Parse()
	runtime.GOMAXPROCS(int(*limit))
	//fmt.Printf("concurrent_limit\t: %d\n", *limit)
	//fmt.Printf("output\t: %s\n", *output)

	url := "http://jendela.data.kemdikbud.go.id/api/index.php/CcariMuseum/searchGET?nama=museum"

	museum := getJson(url)
	// fungsi untuk mngeleompokkan data sesuai dengan kabupaten kota
	sliceKeys := make(map[string]string)
	groupedSlices := make(map[string][]Museum)
	for i := range museum {
		if _, ok := sliceKeys[museum[i].Kota]; ok {
			autogenerated := groupedSlices[museum[i].Kota]
			autogenerated = append(autogenerated, museum[i])
			groupedSlices[museum[i].Kota] = autogenerated
		} else {
			sliceKeys[museum[i].Kota] = museum[i].Kota
			autogenerated := []Museum{}
			autogenerated = append(autogenerated, museum[i])
			groupedSlices[museum[i].Kota] = autogenerated
		}
	}
	// membuat file csv sebanyak jumlah kabupaten kota
	for i := range sliceKeys {
		writeToCSV(*output, i, groupedSlices[i])
	}
}
